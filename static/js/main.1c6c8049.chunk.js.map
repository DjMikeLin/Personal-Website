{"version":3,"sources":["components/Navbar.js","components/MainContent.js","components/axiosRouter.js","components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Navbar","react_default","a","createElement","menu","theme","mode","defaultSelectedKeys","Item","key","style","marginRight","icon","type","fontSize","margin","href","React","Component","Content","StyledContent","styled","_templateObject","MainContent","axios","require","Footer","Sider","Homepage","get","then","res","console","log","layout","components_Navbar","components_MainContent","App","components_Homepage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAGQA,EAAWC,IAAXD,OAyBOE,mLArBP,OACIC,EAAAC,EAAAC,cAACL,EAAD,KACIG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACvDN,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CAAWC,IAAI,IAAIC,MAAO,CAAEC,YAAe,QACnCV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,KAAK,OAAOR,MAAM,WAAWK,MAAO,CAAEI,SAAY,MAAOC,OAAU,eAEjFd,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CAAWC,IAAI,KACPR,EAAAC,EAAAC,cAAA,KAAGa,KAAK,gCACJf,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,KAAK,SAASR,MAAM,SAASK,MAAO,CAAEI,SAAY,MAAOC,OAAU,gBAGrFd,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CAAWC,IAAI,KACPR,EAAAC,EAAAC,cAAA,KAAGa,KAAK,+CACJf,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,KAAK,WAAWR,MAAM,SAASK,MAAO,CAAEI,SAAY,MAAOC,OAAU,yBAftFE,IAAMC,2HCDnBC,EAAYpB,IAAZoB,QAEFC,EAAgBC,YAAOF,EAAPE,CAAHC,KAaJC,mLAPP,OACItB,EAAAC,EAAAC,cAACiB,EAAD,2BAHcH,IAAMC,WCV1BM,EAAQC,EAAQ,SCMdC,EAAkB3B,IAAlB2B,OAAQC,EAAU5B,IAAV4B,MAiBDC,mLAZP,ODRJJ,EAAMK,IAAI,gDACLC,KAAK,SAAAC,GAEF,OADAC,QAAQC,IAAI,WACLF,ICMP9B,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACIjC,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACIjC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACwB,EAAD,eAEJ1B,EAAAC,EAAAC,cAACuB,EAAD,uBAVOT,IAAMC,WCMdmB,2LARX,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmC,EAAD,cAJUpB,cCQEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.1c6c8049.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu, Icon, Layout } from 'antd';\n\nconst { Header } = Layout;\n\nclass Navbar extends React.Component{\n    render(){\n        return(\n            <Header>\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\n                    <Menu.Item key=\"1\" style={{ 'marginRight': '20%' }}>\n                            <Icon type=\"home\" theme=\"outlined\" style={{ 'fontSize': '3em', 'margin': '20% auto' }}/>\n                    </Menu.Item>\n                    <Menu.Item key=\"2\">\n                            <a href=\"https://github.com/DjMikeLin\">\n                                <Icon type=\"github\" theme=\"filled\" style={{ 'fontSize': '3em', 'margin': '20% auto' }}/>\n                            </a>\n                    </Menu.Item>\n                    <Menu.Item key=\"3\">\n                            <a href=\"https://www.linkedin.com/in/michael-yu-lin/\">\n                                <Icon type=\"linkedin\" theme=\"filled\" style={{ 'fontSize': '3em', 'margin': '20% auto' }}/>\n                            </a>\n                    </Menu.Item>\n                </Menu>\n            </Header>\n        )\n    }\n}\nexport default Navbar;\n","import React from 'react';\nimport { Layout } from 'antd';\nimport styled from 'styled-components'; \n\nconst { Content } = Layout;\n\nconst StyledContent = styled(Content)`\n    height: 100%;\n`;\n\nclass MainContent extends React.Component{\n    render(){\n        return(\n            <StyledContent>\n                Hello world \n            </StyledContent>\n        )\n    }\n}\nexport default MainContent;\n","const axios = require('axios');\n\nexport function result(){\n    axios.get('https://api.github.com/users/djmikelin/repos')\n        .then(res => {            \n            console.log(\"success\");\n            return res;\n        });\n}\n","import React from 'react';\nimport Navbar from './Navbar';\nimport { Layout } from 'antd';\nimport MainContent from './MainContent';\nimport {result} from './axiosRouter';\n\nconst { Footer, Sider } = Layout;\n\nclass Homepage extends React.Component{\n    render(){\n        result(); \n        return(\n            <Layout>\n                <Navbar />\n                <Layout>\n                    <MainContent />\n                    <Sider>Sider</Sider>\n                </Layout>\n                <Footer>Footer</Footer>\n            </Layout>\n        )\n    }\n}\nexport default Homepage;\n","import React, { Component } from 'react';\nimport Homepage from './components/Homepage';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Homepage />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}